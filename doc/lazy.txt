sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination 192.168.4.1:80
sudo iptables -t nat -A POSTROUTING -j MASQUERADE

sudo iptables -A OUTPUT -o wlan1 -d 192.168.0.1 -j DROP
sudo iptables -A OUTPUT -o wlan1 -d 192.168.4.0/24 -j ACCEPT




====

Use this to add a default route such as wlan1 -> wlan0:

sudo iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
sudo iptables -A FORWARD -i wlan1 -o wlan0 -j ACCEPT
sudo iptables -A FORWARD -i wlan0 -o wlan1 -m state --state RELATED,ESTABLISHED -j ACCEPT

Should look like this:

# ip route show
default via 192.168.0.1 dev wlan0 proto dhcp src 192.168.0.39 metric 3002
192.168.0.0/24 dev wlan0 proto dhcp scope link src 192.168.0.39 metric 3002
192.168.4.0/24 dev wlan1 proto dhcp scope link src 192.168.4.1 metric 3003

====

sudo tcpdump -i wlan1 -nn -s 0 -w client_wlan1_traffic.pcap '(port 53 or port 80 or port 443 or icmp) and not broadcast and not multicast'
sudo tcpdump -nn -tttt -r client_wlan1_traffic.pcap > foo.txt

====

When an Android device connects to an WiFi AP it perform some checks to see if the AP has Internet access. Like this.

DNS: www.google.com -> 142.250.74.68

DNS: connectivitycheck.gstatic.com -> 142.250.74.99

HTTP: connectivitycheck.gstatic.com

  GET /generate_204 HTTP/1.1
  Connection: close
  User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Ge  cko) Chrome/60.0.3112.32 Safari/537.36
  Host: connectivitycheck.gstatic.com
  Accept-Encoding: gzip

  HTTP/1.1 204 No Content
  Content-Length: 0
  Cross-Origin-Resource-Policy: cross-origin
  Date: Fri, 29 Nov 2024 17:00:06 GMT
  Connection: close

HTTPS: www.google.com
  ???

I need to emulate this beahviour and I can do that with careful use of dnsmasq and iptables. A problem still remains though. I cannot see what I need to answer to the HTTPS request to emulate that their is Internet connectivity? I could trey to just return 200 OK but now I'm guessing wildly.
